import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { Project, Vacancy } from '../app/types.ts';

// Create an API slice using RTK Query
export const api = createApi({
    reducerPath: 'api', // Define the reducer path for the API
    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:8080/' }), // Set the base URL for all API requests
    endpoints: (builder) => ({
        // Projects endpoints

        // Fetch all projects
        getProjects: builder.query<Project[], void>({
            query: () => 'projects',
        }),

        // Fetch a specific project by ID
        getProject: builder.query<Project, Project['id']>({
            query: (id) => `projects/${id}`,
        }),

        // Create a new project
        postProjects: builder.mutation<Project, Project>({
            query: (project) => ({
                url: 'projects',
                method: 'POST',
                body: project,
            }),
        }),

        // Update an existing project by ID
        putProject: builder.mutation<Project, { id: Project['id']; project: Project | undefined }>({
            query: ({ id, project }) => ({
                url: `projects/${id}`,
                method: 'PUT',
                body: { ...project },
            }),
        }),

        // Delete a project by ID
        deleteProject: builder.mutation<void, Project['id']>({
            query: (id) => ({
                url: `projects/${id}`,
                method: 'DELETE',
            }),
        }),

        // Vacancies endpoints

        // Fetch all vacancies related to a specific project
        getVacancies: builder.query<Vacancy[], Project['id']>({
            query: (id) => `projects/${id}/vacancies`,
        }),

        // Create a new vacancy for a project
        postVacancy: builder.mutation<Vacancy, { id: Project['id']; vacancy: Vacancy }>({
            query: ({ id, vacancy }) => ({
                url: `projects/${id}/vacancies`,
                method: 'POST',
                body: vacancy,
            }),
        }),

        // Update an existing vacancy by ID
        putVacancy: builder.mutation<void, { id: Vacancy['id']; vacancy: Vacancy }>({
            query: ({ id, vacancy }) => ({
                url: `/vacancies/${id}`,
                method: 'PUT',
                body: vacancy,
            }),
        }),

        // Delete a vacancy by ID
        deleteVacancy: builder.mutation<void, Vacancy['id']>({
            query: (id) => ({
                url: `/vacancies/${id}`,
                method: 'DELETE',
            }),
        }),
    }),
});

// Export hooks generated by the API slice
export const {
    useGetProjectsQuery,
    useGetProjectQuery,
    usePostProjectsMutation,
    usePutProjectMutation,
    useDeleteProjectMutation,
    useGetVacanciesQuery,
    usePostVacancyMutation,
    usePutVacancyMutation,
    useDeleteVacancyMutation,
} = api;
